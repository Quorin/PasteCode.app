// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model User {
    id               String            @id @default(uuid())
    name             String            @unique
    email            String            @unique
    acceptTerms      Boolean           @default(true)
    password         String
    confirmed        Boolean           @default(false)
    sessions         Session[]
    resetPassword    ResetPassword?
    confirmationCode ConfirmationCode?
    pastes           Paste[]
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPassword {
    id        String   @id @default(uuid())
    code      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
}

model ConfirmationCode {
    id        String   @id @default(uuid())
    code      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
}

model Paste {
    id          String         @id @default(uuid())
    title       String
    content     String         @default("") @db.LongText
    password    String?
    style       String?
    description String?        @db.LongText
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    expiresAt   DateTime?
    user        User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String?
    tags        TagsOnPastes[]
}

model Tag {
    id     String         @id @default(uuid())
    name   String         @unique
    pastes TagsOnPastes[]
}

model TagsOnPastes {
    tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId   String
    paste   Paste  @relation(fields: [pasteId], references: [id], onDelete: Cascade)
    pasteId String

    @@id([tagId, pasteId])
}
